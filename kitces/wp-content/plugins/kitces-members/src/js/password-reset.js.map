{"version":3,"file":"js/password-reset.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,2DAA2D,GAAG,UAAU;AACxE;AACA;AACA;;;;;;;;;;;ACXA,UAAU,mBAAO,CAAC,4DAAO;AACzB,YAAY,mGAA4B;AACxC,2BAA2B,mBAAO,CAAC,0FAAsB;;AAEzD;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB;AACA;AACA;AACA,yBAAyB,sCAAsC;AAC/D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB;AACA,aAAa,SAAS;AACtB;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC/OA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA,YAAY,mGAA4B;;AAExC;AACA;AACA;AACA,iCAAiC,sBAAsB;AACvD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;A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","sources":["webpack:///../node_modules/password-validator/src/constants.js","webpack:///../node_modules/password-validator/src/index.js","webpack:///../node_modules/password-validator/src/lib.js","webpack:///../node_modules/password-validator/src/validationMessages.js","webpack:///./ts/password-reset/doValidate.ts","webpack:///./ts/password-reset/index.ts","webpack:///./ts/password-reset/inputHandler.ts","webpack:///./ts/password-reset/showErrorMessage.ts","webpack:///./ts/password-reset/showIndicator.ts","webpack:///./ts/password-reset/showTooltip.ts","webpack:///./ts/password-reset/updateChecks.ts","webpack:///./ts/password-reset/validatePassword.ts","webpack:///./ts/password-reset/validateSchema.ts","webpack:///./ts/password-reset/validaters.ts","webpack:///webpack/bootstrap","webpack:///webpack/before-startup","webpack:///webpack/startup","webpack:///webpack/after-startup"],"sourcesContent":["module.exports = {\n  error: {\n    length: 'Length should be a valid positive number',\n    password: 'Password should be a valid string'\n  },\n  regex: {\n    digits: '(\\\\d.*)',\n    letters: '([a-zA-Z].*)',\n    symbols: '([`~\\\\!@#\\\\$%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-_\\\\=\\\\+\\\\[\\\\\\{\\\\}\\\\]\\\\\\\\\\|;:\\\\\\'\",<.>\\\\/\\\\?€£¥₹§±].*)',\n    spaces: '([\\\\s].*)'\n  }\n};\n","var lib = require('./lib');\nvar error = require('./constants').error;\nvar getValidationMessage = require('./validationMessages');\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  const len = Number(num);\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @return {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} method - Property name\n * @param {array} arguments - arguments for the func property\n */\nfunction _register(method, args, description) {\n  // Add property to the schema\n  this.properties.push({ method, arguments: args, description });\n  return this;\n}\n\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to validate\n   * @param {object} [options] - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @param {boolean} [options.details] - asks for more details about\n   *           failed validations including arguments, and error messages\n   * @return {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list' or\n   *           'options.details' is not set. Otherwise, it returns an\n   *           array of property names which failed validations\n   */\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.details = Boolean(options && options.details);\n    this.password = String(pwd);\n\n    this.positive = true;\n\n    if (this.list || this.details) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          var detail = property.method;\n          // If the details option was provided,\n          // return a rich object including validation message\n          if (this.details) {\n            detail = { validation: property.method };\n            if (property.arguments && property.arguments[0]) {\n              detail.arguments = property.arguments[0];\n            }\n\n            if (!this.positive && property.method !== 'not') {\n              detail.inverted = true;\n            }\n            var description = property.arguments && property.arguments[1];\n            var validationMessage = description || getValidationMessage(property.method, detail.arguments, detail.inverted);\n            detail.message = validationMessage;\n          }\n\n          return errorList.concat(detail);\n        }\n        return errorList;\n      }, []);\n    }\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n\n  /**\n   * Rule to mandate the presence of letters in the password\n   *\n   * @param {number} [count] - minimum number of letters required\n   * @param {string} [description] - description of the validation\n   */\n  letters(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'letters', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of digits in the password\n   *\n   * @param {number} [count] - minimum number of digits required\n   * @param {string} [description] - description of the validation\n   */\n  digits(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'digits', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of symbols in the password\n   *\n   * @param {number} [count] - minimum number of symbols required\n   * @param {string} [description] - description of the validation\n   */\n  symbols(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'symbols', arguments);\n  }\n\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   * @param {string} [description] - description of the validation\n   */\n  min(num) {\n    _validateLength(num);\n    return _register.call(this, 'min', arguments);\n  }\n\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   * @param {string} [description] - description of the validation\n   */\n  max(num) {\n    _validateLength(num);\n    return _register.call(this, 'max', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   *\n   * @param {number} [count] - minimum number of lowercase letters required\n   * @param {string} [description] - description of the validation\n   */\n  lowercase(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'lowercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   *\n   * @param {number} [count] - minimum number of uppercase letters required\n   * @param {string} [description] - description of the validation\n\n   */\n  uppercase(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'uppercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   *\n   * @param {number} [count] - minimum number of spaces required\n   * @param {string} [description] - description of the validation\n   */\n  spaces(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'spaces', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   *\n   * @param {string|RegExp} [patten] - pattern to match\n   * @param {string} [description] - description of the validation\n   */\n  has() {\n    return _register.call(this, 'has', arguments);\n  }\n\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   *\n   * @param {string|RegExp} [patten] - pattern to not match\n   * @param {string} [description] - description of the validation\n   */\n  not() {\n    return _register.call(this, 'not', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   */\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   * @param {string} [description] - description of the validation\n   */\n  oneOf() {\n    return _register.call(this, 'oneOf', arguments);\n  }\n}\n\nmodule.exports = PasswordValidator;\n","/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp, repeat) {\n  if (repeat && repeat > 1) {\n    const parsedRepeat = parseInt(repeat, 10);\n    return new RegExp(regexp + '{' + parsedRepeat + ',}').test(this.password) === this.positive;\n  }\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presence of digits\n   *\n   * @param {number} repeat - count of required digits\n   */\n  digits: function digits(repeat) {\n    return _process.call(this, regex.digits, repeat);\n  },\n\n  /**\n   * Method to validate the presence of letters\n   *\n   * @param {number} repeat - count of required letters\n   */\n  letters: function letters(repeat) {\n    return _process.call(this, regex.letters, repeat);\n  },\n\n  /**\n   * Method to validate the presence of uppercase letters\n   *\n   * @param {number} repeat - count of required uppercase letters\n   */\n  uppercase: function uppercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let upperCaseLetters = 0;\n\n      while ((upperCaseLetters < repeat) && (characterIndex < this.password.length)) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toLowerCase()) {\n          upperCaseLetters++;\n        }\n        characterIndex++;\n      }\n\n      return (upperCaseLetters === repeat) === this.positive;\n    }\n    return (this.password !== this.password.toLowerCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of lowercase letters\n   *\n   * @param {number} repeat - count of required lowercase letters\n   */\n  lowercase: function lowercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let lowerCaseLetters = 0;\n\n      while ((lowerCaseLetters < repeat) && (characterIndex < this.password.length)) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toUpperCase()) {\n          lowerCaseLetters++;\n        }\n        characterIndex++;\n      }\n\n      return (lowerCaseLetters === repeat) === this.positive;\n    }\n    return (this.password !== this.password.toUpperCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of symbols\n   *\n   * @param {number} repeat - count of required symbols\n   */\n  symbols: function symbols(repeat) {\n    return _process.call(this, regex.symbols, repeat);\n  },\n\n  /**\n   * Method to validate the presence of space\n   *\n   * @param {number} repeat - count of required spaces\n   */\n  spaces: function spaces(repeat) {\n    return _process.call(this, regex.spaces, repeat);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  }\n};\n","module.exports = function (method, arg, inverted) {\n  const msgList = inverted ? negativeMessages : positiveMessages;\n  return msgList[method] && msgList[method](arg);\n};\n\nconst positiveMessages = {\n  min: (num) => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  max: (num) => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  letters: (num = 1) => `The string should have a minimum of ${num} letter${pluralify(num)}`,\n  digits: (num = 1) => `The string should have a minimum of ${num} digit${pluralify(num)}`,\n  uppercase: (num = 1) => `The string should have a minimum of ${num} uppercase letter${pluralify(num)}`,\n  lowercase: (num = 1) => `The string should have a minimum of ${num} lowercase letter${pluralify(num)}`,\n  symbols: (num = 1) => `The string should have a minimum of ${num} symbol${pluralify(num)}`,\n  spaces: (num = 1) => `The string should have a minimum of ${num} space${pluralify(num)}`,\n  oneOf: (list) => `The string should be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: (pattern) => `The string should have pattern '${pattern}'`,\n  not: (pattern) => `The string should not have pattern '${pattern}'`\n};\n\nconst negativeMessages = {\n  min: (num) => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  max: (num) => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  letters: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} letter${pluralify(num)}`,\n  digits: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} digit${pluralify(num)}`,\n  uppercase: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} uppercase letter${pluralify(num)}`,\n  lowercase: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} lowercase letter${pluralify(num)}`,\n  symbols: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} symbol${pluralify(num)}`,\n  spaces: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} space${pluralify(num)}`,\n  oneOf: (list) => `The string should not be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: (pattern) => `The string should not have pattern '${pattern}'`,\n  not: (pattern) => `The string should have pattern '${pattern}'`\n\n};\n\nfunction pluralify(num) {\n  return num === 1 ? '' : 's';\n}\n","import validateSchema from './validateSchema';\nimport showIndicator from './showIndicator';\n\nconst doValidate = (schema: any, element: HTMLInputElement, checkedElement?: HTMLElement): boolean => {\n\tlet isValidated = validateSchema(element.value, schema);\n\n\telement.addEventListener('input', () => {\n\t\tisValidated = validateSchema(element.value, schema);\n\n\t\tif (checkedElement) {\n\t\t\tshowIndicator(isValidated, checkedElement);\n\t\t}\n\n\t\treturn isValidated;\n\t});\n\n\telement.addEventListener('focus', () => {\n\t\tisValidated = validateSchema(element.value, schema);\n\n\t\tif (checkedElement) {\n\t\t\tshowIndicator(isValidated, checkedElement);\n\t\t}\n\n\t\treturn isValidated;\n\t});\n\n\treturn isValidated;\n};\n\nexport default doValidate;\n","import inputHandler from './inputHandler';\n// import formHandler from './formHandler';\n\ninputHandler();\n// formHandler();\n","// import passwordMeter from './passwordMeter';\nimport PasswordValidator from 'password-validator';\nimport showTooltip from './showTooltip';\nimport validatePassword from './validatePassword';\n\nconst inputHandler = () => {\n\tconst pass1 = <HTMLInputElement>document.getElementById('password-1');\n\tconst pass2 = <HTMLInputElement>document.getElementById('password-2');\n\n\tconst pass1Tooltip = <HTMLElement>document.getElementById('password-reset-form-tooltip-pass-1');\n\tconst pass2Tooltip = <HTMLElement>document.getElementById('password-reset-form-tooltip-pass-2');\n\tconst tooltips = Array.from(document.querySelectorAll('.password-reset-form__tooltip'));\n\n\tconst passInputs = <HTMLInputElement[]>[pass1, pass2];\n\tconst passInputTooltips = <HTMLElement[]>[pass1Tooltip, pass2Tooltip];\n\n\tshowTooltip(passInputs, passInputTooltips, tooltips);\n\tvalidatePassword(passInputs);\n};\n\nexport default inputHandler;\n","const showErrorMessage = (check: boolean, id: string) => {\n\tif (check) {\n\t\tconst selector = `${id} .password-reset-form__content-text`;\n\t\tconst blacklistMessage = <HTMLElement>document.querySelector(selector);\n\t\tblacklistMessage.style.display = 'block';\n\t\tblacklistMessage.style.color = 'red';\n\t} else {\n\t\tconst selector = `${id} .password-reset-form__content-text`;\n\t\tconst blacklistMessage = <HTMLElement>document.querySelector(selector);\n\t\tblacklistMessage.style.display = 'none';\n\t}\n};\n\nexport default showErrorMessage;\n","const showIndicator = (validated: Boolean, checkedElement: HTMLElement): boolean => {\n\tconst check = <HTMLElement>checkedElement?.querySelector('.check');\n\tconst times = <HTMLElement>checkedElement?.querySelector('.times');\n\n\tif (validated) {\n\t\tcheck.style.display = 'block';\n\t\ttimes.style.display = 'none';\n\n\t\treturn true;\n\t} else {\n\t\tcheck.style.display = 'none';\n\t\ttimes.style.display = 'block';\n\t}\n\n\treturn false;\n};\n\nexport default showIndicator;\n","const show = (e: Event, element: HTMLElement, tooltip: HTMLElement, tooltips: any) => {\n\tconst value = (<HTMLInputElement>e.target).value;\n\n\ttooltips.forEach((tooltip: HTMLElement) => {\n\t\tif (tooltip.id !== element.id) {\n\t\t\ttooltip.classList.remove('show');\n\t\t}\n\t});\n\n\tif (value.length >= 3) {\n\t\ttooltip.classList.add('show');\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nconst showTooltip = (elementArray: HTMLInputElement[], tooltipArray: HTMLElement[], tooltips: any) => {\n\telementArray.forEach((element, index) => {\n\t\telement.addEventListener('input', (e: Event) => {\n\t\t\tshow(e, element, tooltipArray[index], tooltips);\n\t\t});\n\n\t\telement.addEventListener('focus', (e: Event) => {\n\t\t\tshow(e, element, tooltipArray[index], tooltips);\n\t\t});\n\n\t\telement.addEventListener('focusout', e => {\n\t\t\ttooltipArray[index].classList.remove('show');\n\t\t});\n\t});\n};\n\nexport default showTooltip;\n","import validators from './validaters';\nimport showErrorMessage from './showErrorMessage';\n\nconst updateChecks = (element: HTMLInputElement, id: string, elementArray: HTMLInputElement[], button: HTMLElement) => {\n\tconst charLength = validators.validateCharLength(element, `password-reset-form-validation-char-length-${id}`);\n\tconst uppercase = validators.validateUppercase(element, `password-reset-form-validation-upper-case-${id}`);\n\tconst symbol = validators.validateSymbols(element, `password-reset-form-special-char-${id}`);\n\tconst number = validators.validateNumbers(element, `password-reset-form-validation-number-${id}`);\n\tconst space = validators.validateSpace(element, '');\n\tconst blacklist = validators.validateBlackList(element, `password-reset-form-forbidden-word-${id}`);\n\tconst match = validators.validateMatch(element, `password-reset-form-pass-match-${id}`, elementArray);\n\n\tshowErrorMessage(!space, `#password-reset-form-spaces-${id}`);\n\tshowErrorMessage(blacklist, `#password-reset-form-forbidden-word-${id}`);\n\n\t// Update disabled submit button.\n\tif (charLength && uppercase && symbol && number && match && space && !blacklist) {\n\t\tbutton.removeAttribute('disabled');\n\t} else {\n\t\tbutton.setAttribute('disabled', 'disabled');\n\t}\n\n\tconst value1 = elementArray[0].value.length > 0 ? elementArray[0].value : '';\n\tconst value2 = elementArray[1].value.length > 0 ? elementArray[1].value : '';\n\tconst noMatchMessage = <HTMLElement>document.getElementById('password-reset-form-pass-match');\n\n\tif (value1 !== value2) {\n\t\tnoMatchMessage.style.display = 'block';\n\t} else {\n\t\tnoMatchMessage.style.display = 'nonw';\n\t}\n};\n\nexport default updateChecks;\n","import updateChecks from './updateChecks';\n\nconst validatePassword = (elementArray: HTMLInputElement[]) => {\n\tconst button = <HTMLInputElement>document.getElementById('password-reset-form-submit');\n\n\telementArray.forEach(element => {\n\t\tconst elementId = element.id;\n\t\tconst id = elementId.slice(-1);\n\n\t\telement.addEventListener('input', () => {\n\t\t\tupdateChecks(element, id, elementArray, button);\n\t\t});\n\n\t\telement.addEventListener('focus', () => {\n\t\t\tupdateChecks(element, id, elementArray, button);\n\t\t});\n\t});\n};\n\nexport default validatePassword;\n","const validateSchema = (password: string, schema: any) => {\n\tif (schema.validate(password)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nexport default validateSchema;\n","import PasswordValidator from 'password-validator';\nimport doValidate from './doValidate';\nimport showIndicator from './showIndicator';\n\nconst validateCharLength = (element: HTMLInputElement, id: string): boolean => {\n\tconst schema = new PasswordValidator();\n\tconst checkedElement = <HTMLElement>document.getElementById(id);\n\treturn doValidate(schema.is().min(4), element, checkedElement);\n};\n\nconst validateUppercase = (element: HTMLInputElement, id: string): boolean => {\n\tconst schema = new PasswordValidator();\n\tconst checkedElement = <HTMLElement>document.getElementById(id);\n\treturn doValidate(schema.has().uppercase(1), element, checkedElement);\n};\n\nconst validateSymbols = (element: HTMLInputElement, id: string): boolean => {\n\tconst schema = new PasswordValidator();\n\tconst checkedElement = <HTMLElement>document.getElementById(id);\n\treturn doValidate(schema.has().symbols(1), element, checkedElement);\n};\n\nconst validateNumbers = (element: HTMLInputElement, id: string): boolean => {\n\tconst schema = new PasswordValidator();\n\tconst checkedElement = <HTMLElement>document.getElementById(id);\n\treturn doValidate(schema.has().digits(1), element, checkedElement);\n};\n\nconst validateMatch = (element: HTMLInputElement, id: string, elements: HTMLInputElement[]): boolean => {\n\tconst checkedElement = <HTMLElement>document.getElementById(id);\n\tconst matched = elements[0].value === elements[1].value;\n\treturn showIndicator(matched, checkedElement);\n};\n\nconst validateBlackList = (element: HTMLInputElement, id: string): boolean => {\n\tconst blacklist = ['Kitces', 'kitces', 'Passw0rd', 'Password123', 'password', 'Password'];\n\treturn blacklist.some(substring => element.value.includes(substring));\n};\n\nconst validateSpace = (element: HTMLInputElement, id: string): boolean => {\n\tconst schema = new PasswordValidator();\n\treturn doValidate(schema.has().not().spaces(), element);\n};\n\nexport default { validateCharLength, validateUppercase, validateSymbols, validateNumbers, validateMatch, validateBlackList, validateSpace };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./ts/password-reset/index.ts\");\n",""],"names":[],"sourceRoot":""}